/*
collisionAvoidance
This is where students will be able to program in a collision avoidance algorithm.  The telemetry callback
is already setup along with a dummy version of how the service request would work.
*/

//standard C++ headers
#include <sstream>
#include <stdlib.h>
#include <time.h>
#include <map>
#include <iostream>
#include <fstream>
#include <sstream>

//ROS, FL, Dubins headers
#include "ros/ros.h"
#include "AU_UAV_ROS/TelemetryUpdate.h"
#include "AU_UAV_ROS/GoToWaypoint.h"
#include "AU_UAV_ROS/RequestWaypointInfo.h"
#include "AU_UAV_ROS/standardFuncs.h"
#include "AU_UAV_ROS/FuzzyLogicController.h"
#include "AU_UAV_ROS/dubins.h"

#define rho 15/(22.5*(M_PI/180.0)) //TODO-check if units are correct, this is currently in meters/radian
#define TIMESTEP 1 
#define UAV_AIRSPEED 11.176

//collisionAvoidance does not have a header file, define methods here
bool firstFuzzyEngine(double distanceToCollision, double overlapDistance, double distToWP, double distBtwnPlanes);
double secondFuzzyEngine(double distBtwnPlanes, double bearingAngle);

//ROS service client for calling a service from the coordinator
ros::ServiceClient goToWaypointClient;
ros::ServiceClient requestInfoClient;

//initialize some cool variables
std::map<int,AU_UAV_ROS::PlanePose> planeMap;
AU_UAV_ROS::FuzzyLogicController fuzzy1;
std::ofstream myfile;
double distBtwnPlanes = -1;
double currentHeading = 0.0;

//this function is run everytime new telemetry information from any plane is recieved
void telemetryCallback(const AU_UAV_ROS::TelemetryUpdate::ConstPtr& msg)
{
	AU_UAV_ROS::PlanePose* currentUAV;


//store current Pose (LatLongAlt) in a waypoint struct
    	AU_UAV_ROS::waypoint planeLatLongAlt;
    	planeLatLongAlt.longitude = msg->currentLongitude;
    	planeLatLongAlt.latitude = msg->currentLatitude;
    	planeLatLongAlt.altitude = msg->currentAltitude;
//store current Pose (meters X, Y, Z) in a position struct
    	AU_UAV_ROS::position currentPose = getXYZ(planeLatLongAlt);


/*----------------------------------------------------------------------------------*/
//This section stores a waypoint and position struct of where the current Plane would
//travel if collision avoidance was NOT initiated
    	AU_UAV_ROS::waypoint nextWaypoint;
    	AU_UAV_ROS::position wouldBePose;
    
    	//Grab the next goal waypoint here:
    	AU_UAV_ROS::RequestWaypointInfo requestsrv;
    	requestsrv.request.planeID = msg->planeID;
    	requestsrv.request.isAvoidanceWaypoint = false;
    	requestsrv.request.positionInQueue = 0;
    
    	if(requestInfoClient.call(requestsrv))
    	{
        	//store response into nextWaypoint (lat/long/alt) and wouldBePose (X,Y,Z)
    	    	nextWaypoint.latitude = requestsrv.response.latitude;
        	nextWaypoint.longitude = requestsrv.response.longitude;
        	nextWaypoint.altitude = requestsrv.response.altitude;
        
        	wouldBePose = getXYZ(nextWaypoint);
    	}
    	else
    	{
        	ROS_ERROR("Did not receive response");
    	}
//figure out would-be heading without CA:
    	double wouldBeHeading = getNewHeading(currentPose, wouldBePose);
    
/*----------------------------------------------------------------------------------*/
//If planeMap is empty, add current information
	if(planeMap.count(msg->planeID)==0)
    	{
	currentUAV = new PlanePose;
	currentUAV->setID(msg->planeID);
	currentUAV->setX(currentPose.x_coordinate);
	currentUAV->setY(currentPose.y_coordinate);
	currentUAV->setZ(currentPose.altitude);
	currentUAV->setHeading(0.0);
	currentUAV->setVelocity(11.176);
	
        planeMap[msg->planeID] = currentUAV;
    	}
    
    //After initial planeMap creation, don't update planeMap until planes have been sent a new Waypoint
    else if (planeMap.count(msg->planeID)!=0 && msg->currentWaypointIndex == -1)
    {
        //Don't do anything here!
    }
    
    //After initial update, we can now update things like newHeading during second time through
    //This should come after everything - no it shouldn't
    else
    {
        
        //Get the current Plane's heading by looking at the heading between the current Pose and Pose at last time step
	AU_UAV_ROS::PlanePose* oldUAV;
	oldUAV = planeMap.find(msg->planeID);
        double currentHeading = getNewHeading(oldUAV, currentUAV);

	currentUAV = new PlanePose;
	currentUAV->setID(msg->planeID);
	currentUAV->setX(currentPose.x_coordinate);
	currentUAV->setY(currentPose.y_coordinate);
	currentUAV->setZ(currentPose.altitude);
	currentUAV->setHeading(currentHeading);
	currentUAV->setVelocity(11.176);


        
        //Find FUZZY LOGIC PARAMETERS FOR CLOSEST PLANE:    
        //get closest plane to current plane here ----> maybe change this function to get "most dangerous" plane
        int closestPlane = getClosestPlane(msg->planeID, planeMap);
	AU_UAV_ROS::PlanePose* closestUAV;
	closestUAV = planeMap.find(closestPlane)->second;

	AU_UAV_ROS::fuzzyParams fuzzyParams;
	fuzzyParams = getFuzzyParams(currentUAV, closestUAV);
	
	//eventually put these all in one function?????
        double distanceToCollision = getDistanceToCollision(currentUAV, closestUAV);
        double overlapDistance = getOverlapDistance(currentUAV, closestUAV);
        double bearingAngle = getBearingAngle(currentUAV, closestUAV);
        distBtwnPlanes = getDist(currentUAV, closestUAV);
        double distToWP = getDist(currentPose, wouldBePose);
        
/*----------------------------------------------------------------------------------*/
        //Decide to enter fuzzy logic??????
        bool enterCA = firstFuzzyEngine(distanceToCollision, overlapDistance, distToWP, distBtwnPlanes);
        if (enterCA)
            {
                //fuzzyHeading is just change in heading, so we need to add it to the wouldBeHeading
                double fuzzyHeading = secondFuzzyEngine(distBtwnPlanes, bearingAngle) + wouldBeHeading;

                //convert fuzzyHeading into a waypoint for the current Plane to go to
                nextWaypoint = getCAWaypoint(fuzzyHeading, currentPose);
            }
/*----------------------------------------------------------------------------------*/
	//if vector is empty
		//calculate dubins path
	//


        //service request to go to the waypoint determined by fuzzy logicness OR normal waypoint
        AU_UAV_ROS::GoToWaypoint gotosrv;
        gotosrv.request.planeID = msg->planeID;
        gotosrv.request.latitude = nextWaypoint.latitude;
        gotosrv.request.longitude = nextWaypoint.longitude;
        
        //these settings mean it is an avoidance maneuver waypoint AND to clear the avoidance queue
        gotosrv.request.isAvoidanceManeuver = true;
        gotosrv.request.isNewQueue = true;
        
        if(goToWaypointClient.call(gotosrv))
        {
            //ROS_INFO("Received response");
        }
        else
        {
            ROS_ERROR("Did not receive response");
        }

        //update map with current Plane Pose, Heading (newPlane)
        planeMap[msg->planeID] = newPlane; 
	}
//Write some Outputs (distance to closest object and distance to waypoint) to some files)
            std::stringstream ss; 
            ss<<"/Home/jeffrey/Documents/data/distanceToClosestPlane" << msg->planeID << ".txt";      
            //ss<<"/Users/Jeffrey/github/local/Team-IV/ros/AU_UAV_stack/AU_UAV_ROS/data/distanceToClosestPlane" << msg->planeID << ".txt";
            std::string str(ss.str());
            myfile.open(str.c_str());//, std::ofstream.app);
            myfile << distBtwnPlanes << "\n";
            myfile.close();
}


//This function will take inputs of min(A,B) and A-B and output true or false to enter the CA algorithm where A is the distance for the current plane to the collision point and B is the distance to collision point for the closest plane to current plane. 
bool firstFuzzyEngine(double distanceToCollision, double overlapDistance, double distToWP, double distBtwnPlanes)
{
/*
    bool collisionPotential;
    if ((distToWP < 25) | (distBtwnPlanes > 50))
    {
        collisionPotential = false;
    }
    else
    {
        collisionPotential = true;
    }
*/
	bool collisionPotential = false; 	
	double output = fuzzy1.FuzzyLogicOne(distanceToCollision, overlapDistance);
	//ROS_INFO("for dToColl= %f and overlap= %f", distanceToCollision, overlapDistance);
	//ROS_INFO("fuzzy logic output = %f", output);
	
	if(output >= 0.4){
		collisionPotential = true; 
		//ROS_INFO("collisionPotential is TRUE");
			
	}
	//ROS_INFO("decide to start CA? %s", collisionPotential);

	return collisionPotential;

}

//This function will take inputs of min(A,B), A-B, bearing angle and output the heading
double secondFuzzyEngine(double distBtwnPlanes, double bearingAngle)//double distanceToCollision, double overlapDistance, double bearingAngle)
{
	double changeInHeading = fuzzy1.FuzzyLogicTwo(distBtwnPlanes, bearingAngle);
	//ROS_INFO("for distBtwnPlanes= %f and bearingAngle= %f ", distBtwnPlanes, bearingAngle); 	
	//ROS_INFO("Change in heading: %f", changeInHeading);
    	return changeInHeading;
}



int main(int argc, char **argv)
{
	//standard ROS startup
	ros::init(argc, argv, "collisionAvoidance");
	ros::NodeHandle n;
	
	//subscribe to telemetry outputs and create client for the avoid collision service
	ros::Subscriber sub = n.subscribe("telemetry", 1000, telemetryCallback);
	goToWaypointClient = n.serviceClient<AU_UAV_ROS::GoToWaypoint>("go_to_waypoint");
    requestInfoClient = n.serviceClient<AU_UAV_ROS::RequestWaypointInfo>("request_waypoint_info");
	
	//create Fuzzy Logic Controllers for use in telemetryCallback
	//fl1 = AU_UAV_ROS::FuzzyLogicController();

	//random seed for if statement in telemetryCallback, remove when collision avoidance work begins
	srand(time(NULL));
    
    //initialize heading for every plane's initial position

	

	//needed for ROS to wait for callbacks
	ros::spin();	

	return 0;
}
